custom values:
  1: |
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/name: intent-detection
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 1fef7e968908b94f089d9f485c35e8266c5fe508d5f4dfdd61c09f4a3f9e4c69
        labels:
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/name: intent-detection
          application: intent-detection
      spec:
        containers:
        - env:
          - name: MINIO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: someKey
                name: some-thing
          envFrom:
          - configMapRef:
              name: RELEASE-NAME-intent-detection
          image: 007098893018.dkr.ecr.eu-central-1.amazonaws.com/intent-detection:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: http
          name: intent-detection
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
          securityContext: {}
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /health
              port: http
            periodSeconds: 10
        initContainers:
        - command:
          - sh
          - -c
          - until curl --fail --silent --output /dev/null $SEMANTIC_SEARCH_SEARCHER_URL/health;
            do echo "Waiting for semantic search searcher to be available at $SEMANTIC_SEARCH_SEARCHER_URL/health...";
            sleep 3; done
          env:
          - name: SEMANTIC_SEARCH_SEARCHER_URL
            valueFrom:
              configMapKeyRef:
                key: SEMANTIC_SEARCH_SEARCHER_URL
                name: RELEASE-NAME-intent-detection
          image: curlimages/curl:7.84.0
          imagePullPolicy: IfNotPresent
          name: intent-detection-semantic-search-searcher-check
        - command:
          - sh
          - -c
          - until curl --fail --silent --output /dev/null $SEMANTIC_SEARCH_INDEXER_URL/health;
            do echo "Waiting for semantic search indexer to be available at $SEMANTIC_SEARCH_INDEXER_URL/health...";
            sleep 3; done
          env:
          - name: SEMANTIC_SEARCH_INDEXER_URL
            valueFrom:
              configMapKeyRef:
                key: SEMANTIC_SEARCH_INDEXER_URL
                name: RELEASE-NAME-intent-detection
          image: curlimages/curl:7.84.0
          imagePullPolicy: IfNotPresent
          name: intent-detection-semantic-search-indexer-check
        securityContext: {}
        serviceAccountName: RELEASE-NAME-intent-detection
default:
  1: |
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/name: intent-detection
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 1fef7e968908b94f089d9f485c35e8266c5fe508d5f4dfdd61c09f4a3f9e4c69
        labels:
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/name: intent-detection
          application: intent-detection
      spec:
        containers:
        - envFrom:
          - configMapRef:
              name: RELEASE-NAME-intent-detection
          image: 007098893018.dkr.ecr.eu-central-1.amazonaws.com/intent-detection:0.0.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: http
          name: intent-detection
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources: {}
          securityContext: {}
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /health
              port: http
            periodSeconds: 10
        initContainers:
        - command:
          - sh
          - -c
          - until curl --fail --silent --output /dev/null $SEMANTIC_SEARCH_SEARCHER_URL/health;
            do echo "Waiting for semantic search searcher to be available at $SEMANTIC_SEARCH_SEARCHER_URL/health...";
            sleep 3; done
          env:
          - name: SEMANTIC_SEARCH_SEARCHER_URL
            valueFrom:
              configMapKeyRef:
                key: SEMANTIC_SEARCH_SEARCHER_URL
                name: RELEASE-NAME-intent-detection
          image: curlimages/curl:7.84.0
          imagePullPolicy: IfNotPresent
          name: intent-detection-semantic-search-searcher-check
        - command:
          - sh
          - -c
          - until curl --fail --silent --output /dev/null $SEMANTIC_SEARCH_INDEXER_URL/health;
            do echo "Waiting for semantic search indexer to be available at $SEMANTIC_SEARCH_INDEXER_URL/health...";
            sleep 3; done
          env:
          - name: SEMANTIC_SEARCH_INDEXER_URL
            valueFrom:
              configMapKeyRef:
                key: SEMANTIC_SEARCH_INDEXER_URL
                name: RELEASE-NAME-intent-detection
          image: curlimages/curl:7.84.0
          imagePullPolicy: IfNotPresent
          name: intent-detection-semantic-search-indexer-check
        securityContext: {}
        serviceAccountName: RELEASE-NAME-intent-detection
