apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aios.fullname" . }}-app
  labels:
    {{- include "aios.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "aios.selectorLabels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "aios.configChecksum" . | nindent 8 }}
      labels:
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        application: {{ include "aios.name" . }}
        {{- include "aios.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "aios.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if or .Values.app.waitForDatabase .Values.app.waitForKeycloak }}
      initContainers:
        {{- if .Values.app.waitForDatabase }}
        - name: {{ .Chart.Name }}-database-check
          image: bitnami/postgresql:11.13.0-debian-10-r40
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - 'until PGPASSWORD="$AIOS_DATABASE_PASSWORD" pg_isready -h $AIOS_DATABASE_HOST -p $AIOS_DATABASE_PORT -U $AIOS_DATABASE_USERNAME; do echo "Waiting for postgres to be available..."; sleep 3; done'
          env:
            - name: AIOS_DATABASE_HOST
              value: {{ printf "%s-postgresql" .Release.Name }}
            - name: AIOS_DATABASE_PORT
              value: {{ .Values.postgresql.primary.service.ports.postgresql | quote }}
            - name: AIOS_DATABASE_USERNAME
              value: "postgres"
            - name: AIOS_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aios-postgresql-passwords
                  key: postgresql-postgres-password
        {{- end }}
        {{- if .Values.app.waitForAmqp }}
        - name: {{ .Chart.Name }}-amqp-check
          image: alpine:3.16
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - 'until nc -vz -w 3 $AIOS_AMQP_HOST $AIOS_AMQP_PORT; do echo "Waiting for rabbitmq to be available..."; sleep 3; done'
          env:
            - name: AIOS_AMQP_HOST
              value: {{ printf "%s-rabbitmq" .Release.Name }}
            - name: AIOS_AMQP_PORT
              value: {{ .Values.rabbitmq.service.ports.amqp | quote }}
        {{- end }}
        {{- if .Values.app.waitForKeycloak }}
        - name: {{ .Chart.Name }}-keycloak-check
          image: curlimages/curl:7.80.0
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - 'until curl --fail --silent --output /dev/null $AIOS_SECURITY_KEYCLOAK_AUTH_SERVER_URL/realms/$AIOS_SECURITY_KEYCLOAK_REALM; do echo "Waiting for keycloak to be available at $AIOS_SECURITY_KEYCLOAK_AUTH_SERVER_URL/realms/$AIOS_SECURITY_KEYCLOAK_REALM..."; sleep 3; done'
          env:
            - name: AIOS_SECURITY_KEYCLOAK_REALM
              value: "AIOS"
            - name: AIOS_SECURITY_KEYCLOAK_AUTH_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: keycloak-internal-url
        {{- end }}
        {{- if .Values.app.waitForGrafana }}
        - name: {{ .Chart.Name }}-grafana-check
          image: curlimages/curl:7.80.0
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - 'until curl --fail --silent --output /dev/null $AIOS_GRAFANA_URL/api/health; do echo "Waiting for grafana to be available at $AIOS_GRAFANA_URL/api/health..."; sleep 3; done'
          env:
            - name: AIOS_GRAFANA_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: grafana-internal-url
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: akka-management
              containerPort: 8558
              protocol: TCP
            - name: akka-remote
              containerPort: 25520
              protocol: TCP
            - name: java-debug
              containerPort: 5005
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "aios.fullname" . }}
            {{- if .Values.app.smtpCredentialsSecretName }}
            - secretRef:
                name: {{ .Values.app.smtpCredentialsSecretName }}
            {{- end }}
          env:
            - name: AKKA_CLUSTER_BOOTSTRAP_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "metadata.labels['app.kubernetes.io/name']"
            - name: AIOS_AKKA_DISCOVERY_POD_LABEL_SELECTOR
              value: "app.kubernetes.io/name=%s"
            - name: AIOS_AKKA_DISCOVERY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "metadata.namespace"
            - name: AIOS_AKKA_MGMT_PORT
              value: "8558"
            {{- if not .Values.autoscaling.enabled }}
            - name: AIOS_AKKA_CLUSTER_REQUIRED_CONTACT_POINTS
              value: {{ .Values.replicaCount | quote }}
            {{- end }}
            - name: AIOS_AKKA_REMOTE_CANONICAL_HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: AIOS_AKKA_REMOTE_CANONICAL_PORT
              value: "25520"
            - name: AIOS_AKKA_REMOTE_BIND_HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: AIOS_AKKA_REMOTE_BIND_PORT
              value: "25520"
            {{- if .Values.app.admin.existingSecret }}
            - name: AIOS_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.admin.existingSecret }}
                  key: password
            {{- end }}
            {{- if not (hasKey .Values.app.config "AIOS_SECURITY_KEYCLOAK_AUTH_SERVER_URL") }}
            - name: AIOS_SECURITY_KEYCLOAK_AUTH_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: keycloak-internal-url
            {{- end }}
            {{- if not (hasKey .Values.app.config "AIOS_SECURITY_KEYCLOAK_EXTERNAL_AUTH_SERVER_URL") }}
            - name: AIOS_SECURITY_KEYCLOAK_EXTERNAL_AUTH_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: keycloak-url
            {{- end }}
            {{- if and .Values.keycloak.enabled .Values.keycloak.passwordsSecretName }}
            {{- if not (hasKey .Values.app.config "AIOS_SECURITY_KEYCLOAK_ADMIN_USERNAME") }}
            - name: AIOS_SECURITY_KEYCLOAK_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keycloak.passwordsSecretName }}
                  key: admin-user
            {{- end }}
            {{- if not (hasKey .Values.app.config "AIOS_SECURITY_KEYCLOAK_ADMIN_PASSWORD") }}
            - name: AIOS_SECURITY_KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keycloak.passwordsSecretName }}
                  key: admin-password
            {{- end }}
            {{- end }}
            {{- if and .Values.postgresql.enabled .Values.postgresql.auth.existingSecret }}
            - name: AIOS_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: postgresql-password
            {{- end }}
            - name: AIOS_HTTP_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.urlsConfigMapName }}
                  key: aios-internal-url
            {{- if .Values.rabbitmq.enabled }}
              {{- if .Values.rabbitmq.auth.existingPasswordSecret }}
            - name: AIOS_AMQP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
                  key: rabbitmq-user
            - name: AIOS_AMQP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
                  key: rabbitmq-password
              {{- end }}
            - name: AIOS_UI_AMQP_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s-urls" (include "aios.fullname" .) }}
                  key: amqp-url
            {{- end }}
            - name: AIOS_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "metadata.namespace"
            {{- if .Values.keycloak.enabled }}
            - name: AIOS_ROUTES_UI_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.urlsConfigMapName }}
                  key: aios-url
            {{- end }}
            {{- if and .Values.kubeprometheusstack.enabled .Values.kubeprometheusstack.grafana.enabled }}
              {{- if .Values.kubeprometheusstack.grafana.admin.existingSecret }}
            - name: AIOS_GRAFANA_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kubeprometheusstack.grafana.admin.existingSecret }}
                  key: admin-user
            - name: AIOS_GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kubeprometheusstack.grafana.admin.existingSecret }}
                  key: admin-password
              {{- end }}
              {{- if not (hasKey .Values.app.config "AIOS_GRAFANA_EXTERNAL_URL") }}
            - name: AIOS_GRAFANA_EXTERNAL_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: grafana-url
              {{- end }}
            - name: AIOS_GRAFANA_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: grafana-internal-url
            - name: AIOS_UI_GRAFANA_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: grafana-url
            {{- end }}
            {{- if and .Values.lokistack.enabled .Values.lokistack.loki.enabled }}
              {{- if not (hasKey .Values.app.config "AIOS_GRAFANA_LOKI_URL") }}
            - name: AIOS_GRAFANA_LOKI_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: loki-internal-url
              {{- end }}
              {{- if not (hasKey .Values.app.config "AIOS_LOKI_URL") }}
            - name: AIOS_LOKI_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: loki-internal-url
              {{- end }}
            {{- end }}
            {{- if and .Values.kubeprometheusstack.enabled .Values.kubeprometheusstack.prometheus.enabled }}
              {{- if not (hasKey .Values.app.config "AIOS_PROMETHEUS_URL") }}
            - name: AIOS_PROMETHEUS_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "aios.fullname" . }}-urls
                  key: prometheus-internal-url
              {{- end }}
            {{- end }}
          {{- if .Values.extraVolumeMounts }}
          volumeMounts:
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
        {{- toYaml .Values.extraVolumes | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
