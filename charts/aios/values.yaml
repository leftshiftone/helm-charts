# Default values for aios.
# This is a YAML-formatted file.

app:
  admin:
    # If set a random password will be created in a secret with the name specified below. If a specific password
    # should be used, the password in app.config.AIOS_SECURITY_ADMIN_PASSWORD needs to be set explicitly.
    existingSecret: aios-admin-password
  # Specifies configuration of the application
  config:
    # Available log levels: DEBUG, INFO, WARN, ERROR
    AIOS_LOGGING_LEVEL: "INFO"
    # Explicitly set the initial admin password.
    # AIOS_SECURITY_ADMIN_PASSWORD: "admin"
    # The email configuration is used for Keycloak to be able to send emails in order to invite users.
    # It also acts as a fallback SMTP config for the application itself.
    # AIOS_SMTP_FROM_ADDRESS: "aios@local"
    # AIOS_SMTP_FROM_NAME: "AIOS"
    # AIOS_SMTP_REPLY_ADDRESS: ""
    # AIOS_SMTP_HOST: ""
    # AIOS_SMTP_PORT: ""
    # AIOS_SMTP_USER: "" # Should be specified in a secret
    # AIOS_SMTP_PASSWORD: "" # Should be specified in a secret
    # AIOS_SMTP_AUTH: "true"
    # AIOS_SMTP_STARTTLS: "true"
  # Define the secret name which hold the user and password for the SMTP configuration.
  # e.g. kubectl create secret generic aios-smtp-credentials --from-literal=AIOS_SMTP_USER=admin --from-literal=AIOS_SMTP_PASSWORD='admin'
  smtpCredentialsSecretName: ""
  smtpConfigSecretName: aios-smtp-config
  urlsConfigMapName: aios-urls
  waitForDatabase: true
  waitForAmqp: true
  waitForKeycloak: true
  waitForGrafana: true

replicaCount: 1

image:
  repository: 007098893018.dkr.ecr.eu-central-1.amazonaws.com/aios
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Image pull secrets to use with this service account (is needed if certain registry credentials are needed for pulling the AIOS image).
  imagePullSecrets: []

podAnnotations: {}

podLabels:
  aios.dev/tenant-id: "AIOS"

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: aios.local
      paths:
        - path: /amqp
          port: 15670
          pathType: Exact
          serviceName: '{{ printf "%s-rabbitmq" (include "aios.fullname" .) }}'
        - path: /
          port: 80
          pathType: Prefix
  tls: []
  #  - secretName: aios-tls
  #    hosts:
  #      - aios.local

podMonitor:
  enabled: false
  path: /metrics/prometheus
  port: http
  namespace: ""
  interval: 10s
  additionalLabels: {}
  additionalPodTargetLabels:
    - aios_dev_tenant_id
    - application
    - app_kubernetes_io_instance
    - app_kubernetes_io_name
    - app_kubernetes_io_version

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1000m
  #   memory: 1G
  # requests:
  #   cpu: 100m
  #   memory: 1G

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 9
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /ready
    port: http
startupProbe:
  httpGet:
    path: /ready
    port: http
  failureThreshold: 60
  periodSeconds: 5

extraVolumeMounts: []
  # - mountPath: /debug
  #   name: host
  #   readOnly: true
extraVolumes: []
  # - name: host
  #   hostPath:
  #     path: /host
  #     type: Directory

nodeSelector: {}

tolerations: []

affinity: {}


# Deploy postgres with the included helm chart from https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 15.1.0-debian-11-r4
  auth:
    enablePostgresUser: true
    postgresPassword: ""
    username: admin
    # If left empty a random password will be created in a secret with the name specified below. If a specific password
    # should be used, the existingSecret needs to be set to an empty string or needs to be commented out.
    password: ""
    database: aios
    existingSecret: aios-postgresql-passwords
    secretKeys:
      adminPasswordKey: postgresql-postgres-password
      userPasswordKey: postgresql-password
    usePasswordFiles: false
  primary:
    persistence:
      enabled: true
      size: 5Gi
    service:
      ports:
        postgresql: 5432
    podLabels:
      aios.dev/tenant-id: "AIOS"
    # podSecurityContext:
    #   fsGroup: 0
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1G
    #   requests:
    #     cpu: 100m
    #     memory: 1G
  # volumePermissions:
  #   enabled: true
  #   securityContext:
  #     runAsUser: 0
  #   image:
  #     pullPolicy: IfNotPresent
  metrics:
    enabled: false
    serviceMonitor:
      enabled: true
      interval: 10s
      labels: {}
        # Enable by setting it to the release name in order to be picked up by prometheus.
        # release: aios
    # resources:
    #   limits:
    #     cpu: 200m
    #     memory: 250M
    #   requests:
    #     cpu: 10m
    #     memory: 250M


# Deploy postgres with the included helm chart from https://artifacthub.io/packages/helm/bitnami/rabbitmq
rabbitmq:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.11.6-debian-11-r0
  replicaCount: 1
  auth:
    username: admin
    # If left empty a random password will be created in a secret with the name specified below. If a specific password
    # should be used, the existingPasswordSecret needs to be set to an empty string or needs to be commented out.
    password: ""
    existingPasswordSecret: aios-rabbitmq-passwords
    # If left empty a random cookie value will be created in a secret with the name specified below. If a specific erlang cookie value
    # should be used, the existingErlangSecret needs to be set to an empty string or needs to be commented out.
    erlangCookie: ""
    existingErlangSecret: aios-rabbitmq-passwords
  plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"
  extraPlugins: "rabbitmq_auth_backend_http rabbitmq_auth_backend_cache rabbitmq_prometheus"
  clustering:
    enabled: false
  terminationGracePeriodSeconds: 30
  containerPorts:
    amqp: 5672
    amqpTls: 5671
    dist: 25672
    manager: 15672
    epmd: 4369
    metrics: 9419
  extraConfiguration: |-
    log.console = true
    log.console.level = info
    default_vhost = aios
    auth_backends.1 = internal
    auth_backends.2 = http
    auth_http.http_method = post
    auth_http.user_path = http://{{ .Release.Name }}-app/api/v1/authenticate/rabbitmq/user
    auth_http.vhost_path = http://{{ .Release.Name }}-app/api/v1/authenticate/rabbitmq/vhost
    auth_http.resource_path = http://{{ .Release.Name }}-app/api/v1/authenticate/rabbitmq/resource
    auth_http.topic_path = http://{{ .Release.Name }}-app/api/v1/authenticate/rabbitmq/topic
  podLabels:
    aios.dev/tenant-id: "AIOS"
  affinity: {}
  nodeSelector: {}
  tolerations: []
  # podSecurityContext:
  #   enabled: true
  #   fsGroup: 1001
  # containerSecurityContext:
  #   enabled: true
  #   runAsUser: 1001
  #   runAsNonRoot: true
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 1G
  #   requests:
  #     cpu: 100m
  #     memory: 1G
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1
  initContainers: []
  sidecars:
    - name: websocket
      image: cloudamqp/websocket-tcp-relay:v1.0.6
      args: ["--upstream=tcp://localhost:5672", "--bind=0.0.0.0", "--port=15670"]
      imagePullPolicy: IfNotPresent
      ports:
        - name: websocket
          containerPort: 15670
      livenessProbe:
        tcpSocket:
          port: 15670
      readinessProbe:
        tcpSocket:
          port: 15670
      startupProbe:
        tcpSocket:
          port: 15670
      resources:
        limits:
          cpu: 200m
          memory: 250M
        requests:
          cpu: 10m
          memory: 250M
  persistence:
    enabled: false
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    existingClaim: ""
    mountPath: /bitnami/rabbitmq/mnesia
    subPath: ""
    size: 1G
  service:
    type: ClusterIP
    portEnabled: true
    distPortEnabled: true
    managerPortEnabled: true
    ports:
      amqp: 5672
      amqpTls: 5671
      dist: 25672
      manager: 15672
      metrics: 9419
      epmd: 4369
    extraPorts:
      - name: websocket
        port: 15670
        targetPort: 15670
  ingress:
    enabled: false
  metrics:
    enabled: false
    plugins: "rabbitmq_prometheus"
    serviceMonitor:
      enabled: true
      namespace: ""
      interval: 30s
      scrapeTimeout: ""
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      targetLabels: {}
      podTargetLabels: {}
      path: ""
      selector: {}
      labels: {}
      annotations: {}
      rules: []


# Deploy keycloak with the included helm chart from https://artifacthub.io/packages/helm/bitnami/keycloak
keycloak:
  enabled: false
  image:
    registry: quay.io
    repository: keycloak/keycloak
    tag: 20.0.5
  themeConfigmapName: aios-keycloak-theme
  realmConfigmapName: aios-keycloak-realm
  configConfigmapName: aios-keycloak-config
  passwordsSecretName: aios-keycloak-passwords
  config:
    KC_LOG_LEVEL: "info"
    KC_HEALTH_ENABLED: true
    KC_METRICS_ENABLED: true
    KC_FEATURES_DISABLED: "docker,openshift-integration"
    KC_TRANSACTION_XA_ENABLED: false
    # KC_HTTP_ENABLED: true
    # KC_DB: postgres
    # KC_DB_URL: "jdbc:postgresql://localhost/keycloak"
    # KC_DB_URL_DATABASE: keycloak
    # KC_DB_USERNAME: admin
    # KC_DB_PASSWORD: admin
    # KC_DB_SCHEMA: public
    # KEYCLOAK_ADMIN: "admin"
    # KEYCLOAK_ADMIN_PASSWORD: "admin"
  command:
    - "/opt/keycloak/bin/kc.sh"
    - "start"
    - "--import-realm"
    - "--proxy"
    - "edge"
  startupProbe:
    enabled: true
    initialDelaySeconds: 20
    failureThreshold: 30
    periodSeconds: 10
  readinessProbe:
    initialDelaySeconds: 0
  livenessProbe:
    initialDelaySeconds: 0
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    hostname: iam.aios.local
    annotations: {}
    # kubernetes.io/ingress.class: nginx
  podLabels:
    aios.dev/tenant-id: "AIOS"
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 1G
  #   requests:
  #     cpu: 100m
  #     memory: 1G
  metrics:
    enabled: false
    service:
      annotations: {}
    serviceMonitor:
      enabled: true
      additionalLabels: {}
      # Enable by setting it to the release name in order to be picked up by prometheus.
      # release: aios
  postgresql:
    enabled: false
  externalDatabase:
    existingSecret: aios-postgresql-passwords
    existingSecretPasswordKey: postgresql-password
  initContainers:
    - name: "keycloak-realm-setup"
      image: python:3.9-alpine
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - printf "$REPLACE_SCRIPT" > /tmp/replace.py && chmod a+x /tmp/replace.py && cp /tmp/realms/keycloak-aios.json /opt/keycloak/data/import/keycloak-aios.json && /tmp/replace.py /opt/keycloak/data/import/keycloak-aios.json
      env:
        - name: REPLACE_SCRIPT
          value: |
            #!/usr/bin/env python3
            import os
            import re
            import sys
            file = sys.argv[1]
            with open(file, "r+") as f:
                text = f.read()
                for k, v in dict(filter(lambda e: e[0].startswith("AIOS_REALM_"), os.environ.items())).items():
                    print(f"Replacing variable {k}")
                    text = re.sub("\$\{" + k + "\}", v, text)
                f.seek(0)
                f.write(text)
                f.truncate()
        - name: AIOS_REALM_AIOS_REDIRECT_URI_1
          valueFrom:
            configMapKeyRef:
              name: aios-urls
              key: aios-realm-redirect-url
        - name: AIOS_REALM_GRAFANA_REDIRECT_URI_1
          valueFrom:
            configMapKeyRef:
              name: aios-urls
              key: grafana-realm-redirect-url
        - name: AIOS_REALM_GRAFANA_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: aios-keycloak-passwords
              key: grafana-client-secret
        - name: AIOS_REALM_SMTP_FROM_NAME
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_FROM_NAME
        - name: AIOS_REALM_SMTP_FROM_ADDRESS
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_FROM_ADDRESS
        - name: AIOS_REALM_SMTP_REPLY_ADDRESS
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_REPLY_ADDRESS
        - name: AIOS_REALM_SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_HOST
        - name: AIOS_REALM_SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_PORT
        - name: AIOS_REALM_SMTP_AUTH
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_AUTH
        - name: AIOS_REALM_SMTP_SSL
          value: "false"
        - name: AIOS_REALM_SMTP_STARTTLS
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_STARTTLS
        - name: AIOS_REALM_SMTP_USER
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_USER
        - name: AIOS_REALM_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: aios-smtp-config
              key: AIOS_SMTP_PASSWORD
      volumeMounts:
        - name: realm-import-dir
          mountPath: /opt/keycloak/data/import
        - name: realm
          mountPath: /tmp/realms
    - name: "keycloak-database-creation"
      image: bitnami/postgresql:15.1.0-debian-11-r4
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |-
          until PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" pg_isready -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER; do echo "Waiting for postgres to be available..."; sleep 2; done
          echo "Creating database $KEYCLOAK_DATABASE_NAME if not exists..."
          PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER -c "SELECT 1 FROM pg_database WHERE datname = '$KEYCLOAK_DATABASE_NAME'" | grep -q 1 || PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER -c "CREATE DATABASE $KEYCLOAK_DATABASE_NAME"
          echo "Creating user $KC_DB_USERNAME if not exists..."
          PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER -c "SELECT 1 FROM pg_user WHERE usename = '$KC_DB_USERNAME'" | grep -q 1 || PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER -c "CREATE USER $KC_DB_USERNAME WITH ENCRYPTED PASSWORD '$KC_DB_PASSWORD'"
          PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER -d $KEYCLOAK_DATABASE_NAME -c "GRANT ALL PRIVILEGES ON DATABASE $KEYCLOAK_DATABASE_NAME to $KC_DB_USERNAME"
          PGPASSWORD="$KEYCLOAK_INIT_DATABASE_PASSWORD" psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_INIT_DATABASE_USER -d $KEYCLOAK_DATABASE_NAME -c "GRANT ALL ON SCHEMA public TO $KC_DB_USERNAME;"
      envFrom:
        - secretRef:
            name: aios-keycloak-database-init
        - secretRef:
            name: aios-keycloak-database
      env:
        - name: KEYCLOAK_INIT_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: aios-postgresql-passwords
              key: postgresql-postgres-password
  extraEnvVarsCM: aios-keycloak-config
  extraEnvVarsSecret: aios-keycloak-database
  extraEnvVars:
    - name: KEYCLOAK_ADMIN
      valueFrom:
        secretKeyRef:
          name: aios-keycloak-passwords
          key: admin-user
    - name: KEYCLOAK_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: aios-keycloak-passwords
          key: admin-password
  extraVolumeMounts:
    - name: realm-import-dir
      mountPath: /opt/keycloak/data/import
    - name: themes
      mountPath: /opt/keycloak/themes/keycloak-aios
  extraVolumes:
    - name: realm-import-dir
      emptyDir: {}
    - name: realm
      configMap:
        name: aios-keycloak-realm
    - name: themes
      configMap:
        name: aios-keycloak-theme
        items:
          - key: themes.keycloak-aios.account.resources.css.style.css
            path: account/resources/css/style.css
          - key: themes.keycloak-aios.account.resources.img.favicon.ico
            path: account/resources/img/favicon.ico
          - key: themes.keycloak-aios.account.theme.properties
            path: account/theme.properties
          - key: themes.keycloak-aios.common.resources.css.global.css
            path: common/resources/css/global.css
          - key: themes.keycloak-aios.common.resources.img.illustration.svg
            path: common/resources/img/illustration.svg
          - key: themes.keycloak-aios.common.resources.img.favicon.ico
            path: common/resources/img/favicon.ico
          - key: themes.keycloak-aios.common.resources.img.logo.svg
            path: common/resources/img/logo.svg
          - key: themes.keycloak-aios.login.resources.css.style.css
            path: login/resources/css/style.css
          - key: themes.keycloak-aios.login.resources.img.favicon.ico
            path: login/resources/img/favicon.ico
          - key: themes.keycloak-aios.login.theme.properties
            path: login/theme.properties
  cache:
    enabled: false


# Deploy prometheus for kubernetes with the included helm chart from https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
kubeprometheusstack:
  enabled: true
  nameOverride: "prometheus"
  grafana:
    enabled: true
    image:
      repository: grafana/grafana
      tag: 9.3.6
    # Dashboards to be deployed when kubeprometheusstack.grafana.extraConfigmapMounts is configured.
    aiosDashboards:
      - aios-app.json
      - aios-database.json
      - aios-amqp.json
      - aios-loadbalancer.json
      - aios-logs.json
      - aios-metrics.json
      - aios-services.json
      - aios-storage.json
    aiosConfig: aios-grafana-config
    # If left empty a random password will be created in a secret with the name specified below. If a specific password
    # should be used, the existingSecret needs to be set to an empty string or needs to be commented out.
    adminPassword: ""
    admin:
      existingSecret: aios-grafana-password
      userKey: admin-user
      passwordKey: admin-password
    persistence:
      enabled: true
      size: 5Gi
      inMemory:
        enabled: false
    useStatefulSet: true
    useInternalUrlForOauth: false
    env:
      GF_LOG_MODE: "console"
      GF_LOG_LEVEL: "info"
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
      GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: "false"
    envValueFrom:
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
        secretKeyRef:
          name: aios-keycloak-passwords
          key: grafana-client-secret
      GF_SERVER_ROOT_URL:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_SERVER_ROOT_URL
      GF_AUTH_GENERIC_OAUTH_NAME:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_AUTH_GENERIC_OAUTH_NAME
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
      GF_AUTH_GENERIC_OAUTH_SCOPES:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_AUTH_GENERIC_OAUTH_SCOPES
      GF_AUTH_GENERIC_OAUTH_AUTH_URL:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_AUTH_GENERIC_OAUTH_AUTH_URL
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
      GF_AUTH_GENERIC_OAUTH_API_URL:
        configMapKeyRef:
          name: aios-grafana-config
          key: GF_AUTH_GENERIC_OAUTH_API_URL
    service:
      port: 80
    ingress:
      enabled: true
      annotations: {}
        # kubernetes.io/ingress.class: nginx
      hosts:
        - grafana.aios.local
      path: /
    plugins: []
      # - grafana-clock-panel
    defaultDashboardsEnabled: true
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: "aios"
          orgId: 1
          folder: "AIOS"
          folderUid: "aios"
          type: file
          disableDeletion: true
          updateIntervalSeconds: 30
          allowUiUpdates: false
          options:
            path: /tmp/aios/dashboards
    ## Configure grafana datasources
    ## ref: http://docs.grafana.org/administration/provisioning/#datasources
    ##
    datasources:
      defaultDatasourceEnabled: true
      isDefaultDatasource: true
      uid: prometheus-aios
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Loki AIOS
            type: loki
            uid: loki-aios
            url: http://{{ printf "%s-loki" .Release.Name }}:3100
            orgId: 1 # The equivalent of the super tenant
            isDefault: false
            jsonData:
              manageAlerts: false
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "AIOS"
            editable: false
    extraConfigmapMounts:
      - name: aios-grafana-dashboards
        mountPath: /tmp/aios/dashboards
        subPath: ""
        configMap: aios-grafana-dashboards
    podLabels:
      aios.dev/tenant-id: "AIOS"
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1G
    #   requests:
    #     cpu: 100m
    #     memory: 1G
  kubeStateMetrics:
    enabled: true
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 100M
    #   requests:
    #     cpu: 10m
    #     memory: 100M
  nodeExporter:
    enabled: true
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 100M
    #   requests:
    #     cpu: 10m
    #     memory: 100M
  prometheusOperator:
    enabled: true
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 100M
    #   requests:
    #     cpu: 10m
    #     memory: 100M
  prometheus:
    enabled: true
    service:
      port: 9090
    prometheusSpec:
      retention: 30d
      serviceMonitorSelectorNilUsesHelmValues: true
      podMonitorSelectorNilUsesHelmValues: true
      # resources:
      #   limits:
      #     cpu: 1000m
      #     memory: 2G
      #   requests:
      #     cpu: 100m
      #     memory: 2G
  alertmanager:
    enabled: false
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: true
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false


# Deploy loki with the included helm chart from https://artifacthub.io/packages/helm/grafana/loki-stack
lokistack:
  enabled: true
  loki:
    enabled: true
    image:
      repository: grafana/loki
      tag: 2.7.4
    config:
      auth_enabled: true # Enables multi tenancy
    service:
      port: 3100
    serviceAccount:
      create: true
    serviceMonitor:
      enabled: false
      interval: 20s
      additionalLabels: {}
        # release: aios
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1G
    #   requests:
    #     cpu: 100m
    #     memory: 1G
  promtail:
    enabled: true
    image:
      repository: grafana/promtail
      tag: 2.7.4
    config:
      logLevel: info
      clients:
        - url: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push
      snippets:
        pipelineStages:
          - tenant:
              label: aios_dev_tenant_id # Feed logs depending on the tenant (uses label aios.dev/tenant-id to determine the tenant id)
        extraRelabelConfigs:
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(aios.+)
    serviceAccount:
      create: true
    serviceMonitor:
      enabled: false
      interval: 20s
      labels: {}
        # release: aios
    # resources:
    #   limits:
    #     cpu: 200m
    #     memory: 500M
    #   requests:
    #     cpu: 100m
    #     memory: 500M
  grafana:
    enabled: false
    persistence:
      inMemory:
        enabled: false
    sidecar:
      datasources:
        enabled: false
  prometheus:
    enabled: false

# Deploy loki with the included helm chart from https://artifacthub.io/packages/helm/grafana/grafana-agent-operator
grafanaagentoperator:
  enabled: false
  image:
    tag: v0.31.3
  nameOverride: grafana-agent-operator
  extraArgs:
    - "--log.level"
    - "info"
  podLabels:
    aios.dev/tenant-id: "AIOS"
  serviceAccount:
    create: true
    name: aios-grafana-agent
  # resources:
  #   limits:
  #     cpu: 200m
  #     memory: 500M
  #   requests:
  #     cpu: 100m
  #     memory: 500M
  grafanaAgent:
    enabled: true
    image:
      repository: grafana/agent
      tag: v0.31.3
    logLevel: info
    metrics:
      instanceSelector:
        matchLabels:
          agent: grafana-agent-metrics
      externalLabels:
        cluster: aios.local
    logs:
      instanceSelector:
        matchLabels:
          agent: grafana-agent-logs
    resources: {}
    #   limits:
    #     cpu: 500m
    #     memory: 500M
    #   requests:
    #     cpu: 100m
    #     memory: 500M
    nodeSelector: {}
    tolerations: []
    affinity: {}
  metricsInstance:
    enabled: true
    additionalLabels:
      agent: grafana-agent-metrics
    remoteWrite:
      - url: http://localhost:9090/api/v1/push
        headers:
          "X-Scope-OrgID": "AIOS"
    # Supply an empty namespace selector to look in all namespaces. Remove
    # this to only look in the same namespace as the MetricsInstance CR
    serviceMonitorNamespaceSelector:
      matchLabels:
        aios.dev/tenant-id: AIOS
        app.kubernetes.io/name: aios
    serviceMonitorSelector:
      matchLabels:
        app.kubernetes.io/instance: aios
    # Supply an empty namespace selector to look in all namespaces. Remove
    # this to only look in the same namespace as the MetricsInstance CR.
    podMonitorNamespaceSelector:
      matchLabels:
        aios.dev/tenant-id: AIOS
        app.kubernetes.io/name: aios
    podMonitorSelector:
      matchLabels:
        app.kubernetes.io/instance: aios
    # Supply an empty namespace selector to look in all namespaces. Remove
    # this to only look in the same namespace as the MetricsInstance CR.
    probeNamespaceSelector:
      matchLabels:
        aios.dev/tenant-id: AIOS
        app.kubernetes.io/name: aios
    probeSelector:
      matchLabels:
        app.kubernetes.io/instance: aios
